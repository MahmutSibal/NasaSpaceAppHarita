{"file":"index-DEcUAp6j.js","mappings":";;;;;;;;;;;;;;;;AAsDc,QAAI,IAAI;AACC,QAAI,IAAI;AAK/B,UAAM,YAAY,IAAI,EAAE;AACxB,UAAM,eAAe,IAAI,EAAE;AAC3B,UAAM,cAAc,IAAI,KAAK;AAI7B,UAAM,WAAW,IAAI,MAAM;AAC3B,UAAM,eAAe,IAAI,IAAI;AACJ,QAAI,IAAI;AAGV,QAAI,IAAI;AACb,QAAI,CAAC;AACD,aAAS,EAAE,KAAK,GAAG,KAAK,GAAG;AAI1B,QAAI,CAAA,CAAE;;AA5EtB,YAAA,OAAAA,eAAAC,WAAA,EAAA,OAAM,UAAM,MAAA,CAAA,CAAA,gwBAAA;AA2BYC,oBAAAC,MAAA,YAAA,IAAX,YAAO;6BAA4DC,eAAA,CAAA,QAAQ,MAAI,SAAA,CAAA,mEACpD,QAAQ,QAAI,qDACpBC,eAAA,QAAQ,IAAI;;kGAOhCF,MAAA,SAAA,CAAS,kBAEjB,eAAaA,oBAAQ,SAAA,oDAAA,GAAqEA,MAAA,YAAA,GAAc,QAAQA,MAAA,YAAA,GAAc,IAAI,yFAAA,0BACxHA,MAAA,WAAA,CAAW,IAAA,cAAA,uEAGgBA,MAAA,WAAA,KAAW,CAAKA,MAAA,SAAA,EAAU,MAAI,IAAA,cAAA;;;;;;;;;;;","names":["_ssrRenderAttrs","_mergeProps","_ssrRenderList","_unref","_ssrRenderClass","_ssrInterpolate"],"sources":["../../../../pages/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"page\">\r\n    <!-- Left Side: Map Container -->\r\n    <div class=\"map-container\">\r\n      <div id=\"map\" ref=\"mapEl\"></div>\r\n      \r\n      <!-- Locate Button (overlay on map) -->\r\n      <button class=\"locate-btn-overlay\" @click=\"locateMe\" title=\"Mevcut konumumu bul\">\r\n        <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n          <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n          <path d=\"M12 1v4m0 14v4M1 12h4m14 0h4\"/>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Right Side: Chat Panel -->\r\n    <div class=\"chat-panel\">\r\n      <!-- Chat Header -->\r\n      <div class=\"chat-header\">\r\n        <div class=\"header-info\">\r\n          <h2 class=\"panel-title\">COSMOSTORM</h2>\r\n          <div class=\"status-indicator active\"></div>\r\n        </div>\r\n        <div class=\"panel-subtitle\">Weather Intelligence</div>\r\n      </div>\r\n\r\n      <!-- Chat Messages -->\r\n      <div class=\"chat-messages\" ref=\"chatMessagesEl\">\r\n        <div v-for=\"message in chatMessages\" :key=\"message.id\" class=\"message\" :class=\"message.type\">\r\n          <div class=\"message-content\" v-html=\"message.text\"></div>\r\n          <div class=\"message-time\">{{ message.time }}</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Chat Input -->\r\n      <div class=\"chat-input\">\r\n        <input \r\n          v-model=\"chatInput\" \r\n          @keyup.enter=\"sendMessage\"\r\n          :placeholder=\"chatStep === 'city' ? 'Hangi şehir? (örn: İstanbul, Diyarbakır, Paris)' : `${selectedCity?.name || selectedCity?.city} için ne öğrenmek istiyorsunuz? (örn: bugün hava, haftalık tahmin, yarın yağmur var mı)`\"\r\n          :disabled=\"isSearching\"\r\n          class=\"input-field\"\r\n        />\r\n        <button @click=\"sendMessage\" :disabled=\"isSearching || !chatInput.trim()\" class=\"send-btn\">\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n            <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"/>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nconst mapEl = ref(null)\r\nconst chatMessagesEl = ref(null)\r\nlet L = null\r\nlet map = null\r\n\r\n// Chat state\r\nconst chatInput = ref('')\r\nconst chatMessages = ref([])\r\nconst isSearching = ref(false)\r\nlet messageIdCounter = 0\r\n\r\n// Two-step interaction state\r\nconst chatStep = ref('city') // 'city' or 'question'\r\nconst selectedCity = ref(null)\r\nconst isWaitingForCity = ref(true)\r\n\r\n// Current weather panel state\r\nconst currentWeather = ref(null)\r\nconst updatedAt = ref(0)\r\nconst currentCenter = reactive({ lat: 0, lng: 0 })\r\nconst units = 'metric' // Always use metric units\r\n\r\n// Favorite cities\r\nconst favoriteCities = ref([])\r\n\r\nfunction fmt(v, unit = '') {\r\n  if (v === null || v === undefined || Number.isNaN(v)) return '-'\r\n  return `${Number(v).toFixed(1)}${unit}`\r\n}\r\n\r\n// Chat message helper\r\nfunction addMessage(text, type = 'system') {\r\n  const message = {\r\n    id: messageIdCounter++,\r\n    text,\r\n    type,\r\n    time: new Date().toLocaleTimeString()\r\n  }\r\n  chatMessages.value.push(message)\r\n  \r\n  // Auto scroll to bottom\r\n  nextTick(() => {\r\n    if (chatMessagesEl.value) {\r\n      chatMessagesEl.value.scrollTop = chatMessagesEl.value.scrollHeight\r\n    }\r\n  })\r\n}\r\n\r\n// Geocoding with Nominatim (OpenStreetMap)\r\nasync function searchLocation(query) {\r\n  try {\r\n    // First try: exact search\r\n    let url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=3&addressdetails=1&accept-language=tr,en`\r\n    let response = await fetch(url)\r\n    \r\n    if (!response.ok) throw new Error('Geocoding failed')\r\n    \r\n    let results = await response.json()\r\n    \r\n    // If no results, try with Turkey country constraint\r\n    if (results.length === 0) {\r\n      const queryWithTurkey = `${query}, Turkey`\r\n      url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(queryWithTurkey)}&limit=3&addressdetails=1&accept-language=tr,en`\r\n      response = await fetch(url)\r\n      \r\n      if (response.ok) {\r\n        results = await response.json()\r\n      }\r\n    }\r\n    \r\n    // If still no results, try common Turkish city name mappings\r\n    if (results.length === 0) {\r\n      const turkishCityMappings = {\r\n        'diyarbakir': 'Diyarbakır',\r\n        'izmir': 'İzmir', \r\n        'ankara': 'Ankara',\r\n        'istanbul': 'İstanbul',\r\n        'antalya': 'Antalya',\r\n        'bursa': 'Bursa',\r\n        'adana': 'Adana',\r\n        'konya': 'Konya',\r\n        'gaziantep': 'Gaziantep',\r\n        'mersin': 'Mersin'\r\n      }\r\n      \r\n      const lowerQuery = query.toLowerCase()\r\n      const mappedCity = turkishCityMappings[lowerQuery]\r\n      \r\n      if (mappedCity) {\r\n        url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(mappedCity + ', Turkey')}&limit=3&addressdetails=1&accept-language=tr,en`\r\n        response = await fetch(url)\r\n        \r\n        if (response.ok) {\r\n          results = await response.json()\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (results.length === 0) {\r\n      return null\r\n    }\r\n    \r\n    // Prefer cities over other location types\r\n    const cityResult = results.find(r => \r\n      r.address?.city || r.address?.town || r.address?.municipality || \r\n      r.type === 'city' || r.type === 'town' || r.type === 'administrative'\r\n    ) || results[0]\r\n    \r\n    return {\r\n      lat: parseFloat(cityResult.lat),\r\n      lng: parseFloat(cityResult.lon),\r\n      name: cityResult.display_name,\r\n      city: cityResult.address?.city || cityResult.address?.town || cityResult.address?.village || cityResult.address?.municipality,\r\n      country: cityResult.address?.country\r\n    }\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error)\r\n    return null\r\n  }\r\n}\r\n\r\n// Favorite cities management\r\nfunction loadFavoriteCities() {\r\n  try {\r\n    const saved = localStorage.getItem('favoriteCities')\r\n    if (saved) {\r\n      favoriteCities.value = JSON.parse(saved)\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading favorite cities:', error)\r\n    favoriteCities.value = []\r\n  }\r\n}\r\n\r\nfunction saveFavoriteCities() {\r\n  try {\r\n    localStorage.setItem('favoriteCities', JSON.stringify(favoriteCities.value))\r\n  } catch (error) {\r\n    console.error('Error saving favorite cities:', error)\r\n  }\r\n}\r\n\r\nfunction addToFavorites(city) {\r\n  if (!favoriteCities.value.find(fav => fav.name === city.name)) {\r\n    favoriteCities.value.push({\r\n      name: city.name,\r\n      lat: city.lat,\r\n      lng: city.lng,\r\n      city: city.city,\r\n      country: city.country\r\n    })\r\n    saveFavoriteCities()\r\n    addMessage(`${city.name} favorilere eklendi!`, 'success')\r\n  } else {\r\n    addMessage(`${city.name} zaten favorilerinizde bulunuyor.`, 'info')\r\n  }\r\n}\r\n\r\nfunction removeFromFavorites(cityName) {\r\n  const index = favoriteCities.value.findIndex(fav => fav.name === cityName)\r\n  if (index !== -1) {\r\n    favoriteCities.value.splice(index, 1)\r\n    saveFavoriteCities()\r\n    addMessage(`${cityName} favorilerden çıkarıldı.`, 'success')\r\n  }\r\n}\r\n\r\nfunction goToFavoriteCity(city) {\r\n  if (map) {\r\n    map.flyTo([city.lat, city.lng], 10)\r\n    fetchCurrentWeather()\r\n    addMessage(`${city.name} konumuna gidildi.`, 'success')\r\n    \r\n    // Auto-get weather for the favorite city\r\n    setTimeout(async () => {\r\n      addMessage('Bu konumun hava durumu getiriliyor...', 'loading')\r\n      const weatherResponse = await getChatWeatherResponse(city.lat, city.lng, \"bugün hava durumu nasıl\")\r\n      \r\n      if (weatherResponse) {\r\n        addMessage(weatherResponse.response.replace(/\\n/g, '<br>'), 'weather')\r\n      }\r\n    }, 1000)\r\n  }\r\n}\r\n\r\n// Backend API calls\r\nasync function getWeatherFromAPI(lat, lon) {\r\n  try {\r\n    const response = await fetch('http://localhost:8000/weather', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        latitude: lat,\r\n        longitude: lon,\r\n        units: units\r\n      })\r\n    })\r\n    \r\n    if (!response.ok) throw new Error('API request failed')\r\n    \r\n    return await response.json()\r\n  } catch (error) {\r\n    console.error('Backend API error:', error)\r\n    return null\r\n  }\r\n}\r\n\r\nasync function getChatWeatherResponse(lat, lon, message) {\r\n  try {\r\n    const response = await fetch('http://localhost:8000/chat/weather', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        latitude: lat,\r\n        longitude: lon,\r\n        units: units,\r\n        message: message\r\n      })\r\n    })\r\n    \r\n    if (!response.ok) throw new Error('Chat API request failed')\r\n    \r\n    return await response.json()\r\n  } catch (error) {\r\n    console.error('Chat API error:', error)\r\n    return null\r\n  }\r\n}\r\n\r\nasync function getWeeklyForecast(lat, lon) {\r\n  try {\r\n    const response = await fetch('http://localhost:8000/forecast/weekly', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        latitude: lat,\r\n        longitude: lon,\r\n        units: units\r\n      })\r\n    })\r\n    \r\n    if (!response.ok) throw new Error('Weekly forecast request failed')\r\n    \r\n    return await response.json()\r\n  } catch (error) {\r\n    console.error('Weekly forecast API error:', error)\r\n    return null\r\n  }\r\n}\r\n\r\nasync function getTomorrowForecast(lat, lon) {\r\n  try {\r\n    const response = await fetch('http://localhost:8000/forecast/tomorrow', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        latitude: lat,\r\n        longitude: lon,\r\n        units: units\r\n      })\r\n    })\r\n    \r\n    if (!response.ok) throw new Error('Tomorrow forecast request failed')\r\n    \r\n    return await response.json()\r\n  } catch (error) {\r\n    console.error('Tomorrow forecast API error:', error)\r\n    return null\r\n  }\r\n}\r\n\r\n// Smart location extraction and command detection\r\nfunction analyzeMessage(message) {\r\n  const lowerMessage = message.toLowerCase()\r\n  \r\n  // Detect command types\r\n  const isWeeklyForecast = /\\b(hafta|week|7\\s*g[üu]n|bu\\s*hafta|haftal[ıi]k)\\b/i.test(lowerMessage)\r\n  const isTomorrowQuery = /\\b(yar[ıi]n|tomorrow)\\b/i.test(lowerMessage)\r\n  const isHourlyQuery = /\\b(saatlik|hourly|saat\\s*saat|24\\s*saat)\\b/i.test(lowerMessage)\r\n  const isTodayQuery = /\\b(bug[üu]n|today|şimdi|şu\\s*an)\\b/i.test(lowerMessage)\r\n  const isThisWeekQuery = /\\b(bu\\s*hafta|this\\s*week)\\b/i.test(lowerMessage)\r\n  const isCurrentQuery = /\\b(şu\\s*an|şimdi|now|current|mevcut)\\b/i.test(lowerMessage)\r\n  \r\n  // Favorite city commands\r\n  const isAddFavoriteCommand = /\\b(favorilere\\s*ekle|add\\s*favorite|fav\\s*ekle)\\b/i.test(lowerMessage)\r\n  const isListFavoritesCommand = /\\b(favorilerim|favoriler|favorites|favs|favorite\\s*list)\\b/i.test(lowerMessage)\r\n  const isRemoveFavoriteCommand = /\\b(favorilerden\\s*çıkar|remove\\s*favorite|fav\\s*sil)\\b/i.test(lowerMessage)\r\n  \r\n  // Weather keywords - expanded list\r\n  const weatherKeywords = ['hava', 'sıcaklık', 'yağmur', 'kar', 'rüzgar', 'bugün', 'weather', 'derece', 'soğuk', 'sıcak', 'nasıl', 'durum', 'kaç', 'nem', 'basınç', 'uv', 'yağar', 'yağış', 'tahmin']\r\n  const isWeatherQuestion = weatherKeywords.some(keyword => lowerMessage.includes(keyword))\r\n  \r\n  // Enhanced location extraction patterns\r\n  const locationPatterns = [\r\n    // \"Diyarbakır'da bu hafta yağmur yağar mı\"\r\n    /(\\w+(?:\\s+\\w+)*?)(?:\\s*(?:'?da|'?de|'?ta|'?te))?\\s+(?:bu\\s+hafta|hafta|haftalık|hava|weather|sıcaklık|derece|yağmur|yağar)/i,\r\n    // \"Diyarbakır haftalık hava\"\r\n    /^(\\w+(?:\\s+\\w+)*?)\\s+(?:haftalık|hafta|hava|weather|sıcaklık|derece)/i,\r\n    // \"Istanbul'da kaç derece\"\r\n    /(\\w+(?:\\s+\\w+)*?)\\s*(?:'?da|'?de|'?ta|'?te)\\s+(?:hava|kaç|sıcaklık|derece|yağmur|nasıl)/i,\r\n    // \"New York'ta hava nasıl\"\r\n    /(\\w+(?:\\s+\\w+)*?)\\s*(?:'?ta|'?te|'?da|'?de|hava|weather|sıcaklık|derece)/i,\r\n    // \"How is weather in Paris\"\r\n    /(?:weather\\s+in\\s+|hava\\s+.*?)\\s*(\\w+(?:\\s+\\w+)*)/i,\r\n    // Just city name at the beginning\r\n    /^(\\w+(?:\\s+\\w+)*?)\\s+(?:hava|weather|sıcaklık|derece|nasıl|hafta|yağmur|yağar)/i\r\n  ]\r\n  \r\n  let extractedLocation = null\r\n  for (const pattern of locationPatterns) {\r\n    const match = lowerMessage.match(pattern)\r\n    if (match && match[1]) {\r\n      let location = match[1].trim()\r\n      // Clean up common Turkish suffixes and common words\r\n      location = location.replace(/'?(ta|te|da|de|nın|nin|nun|nün)$/i, '')\r\n      location = location.replace(/\\b(bu|şu|this|that)\\s+/i, '')\r\n      \r\n      // Skip if location is too short or contains only common words\r\n      if (location.length > 2 && !['bu', 'şu', 'bu hafta', 'hafta'].includes(location.toLowerCase())) {\r\n        extractedLocation = location\r\n        break\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isWeatherQuestion,\r\n    isWeeklyForecast,\r\n    isTomorrowQuery,\r\n    isHourlyQuery,\r\n    isTodayQuery,\r\n    isThisWeekQuery,\r\n    isCurrentQuery,\r\n    isAddFavoriteCommand,\r\n    isListFavoritesCommand,\r\n    isRemoveFavoriteCommand,\r\n    extractedLocation\r\n  }\r\n}\r\n\r\nasync function sendMessage() {\r\n  const query = chatInput.value.trim()\r\n  if (!query || isSearching.value) return\r\n  \r\n  // Add user message\r\n  addMessage(query, 'user')\r\n  \r\n  // Clear input\r\n  chatInput.value = ''\r\n  isSearching.value = true\r\n  \r\n  // Handle two-step interaction\r\n  if (chatStep.value === 'city') {\r\n    // Step 1: City selection\r\n    await handleCitySelection(query)\r\n  } else if (chatStep.value === 'question') {\r\n    // Step 2: Weather question\r\n    await handleWeatherQuestion(query)\r\n  }\r\n  \r\n  isSearching.value = false\r\n}\r\n\r\nasync function handleCitySelection(query) {\r\n  // Handle favorite city commands\r\n  const analysis = analyzeMessage(query)\r\n  \r\n  if (analysis.isListFavoritesCommand) {\r\n    if (favoriteCities.value.length === 0) {\r\n      addMessage('Henüz favori şehriniz bulunmuyor.', 'info')\r\n    } else {\r\n      let favoritesText = 'FAVORI ŞEHIRLER:\\n\\n'\r\n      favoriteCities.value.forEach((city, index) => {\r\n        favoritesText += `${index + 1}. ${city.city || city.name} (${city.country || 'Ülke bilgisi yok'})\\n`\r\n      })\r\n      favoritesText += '\\nBir şehir seçmek için numarasını yazın!'\r\n      addMessage(favoritesText.replace(/\\n/g, '<br>'), 'info')\r\n    }\r\n    return\r\n  }\r\n  \r\n  // Check if user is selecting a favorite city by number\r\n  const favoriteIndex = parseInt(query) - 1\r\n  if (!isNaN(favoriteIndex) && favoriteIndex >= 0 && favoriteIndex < favoriteCities.value.length) {\r\n    const favoriteCity = favoriteCities.value[favoriteIndex]\r\n    selectedCity.value = favoriteCity\r\n    \r\n    // Move map to selected city\r\n    if (map) {\r\n      map.flyTo([favoriteCity.lat, favoriteCity.lng], 10)\r\n      await fetchCurrentWeather()\r\n    }\r\n    \r\n    addMessage(`${favoriteCity.city || favoriteCity.name} seçildi!`, 'success')\r\n    addMessage('Bu şehir için ne öğrenmek istiyorsunuz?', 'info')\r\n    addMessage('Örnek sorular: \"bugün hava nasıl\", \"haftalık tahmin\", \"yarın yağmur var mı\", \"sıcaklık kaç derece\"', 'info')\r\n    \r\n    chatStep.value = 'question'\r\n    return\r\n  }\r\n  \r\n  // Check if user is trying to select a favorite city by name\r\n  const favoriteCity = favoriteCities.value.find(fav => \r\n    fav.city?.toLowerCase().includes(query.toLowerCase()) || \r\n    fav.name?.toLowerCase().includes(query.toLowerCase())\r\n  )\r\n  \r\n  if (favoriteCity) {\r\n    selectedCity.value = favoriteCity\r\n    \r\n    // Move map to selected city\r\n    if (map) {\r\n      map.flyTo([favoriteCity.lat, favoriteCity.lng], 10)\r\n      await fetchCurrentWeather()\r\n    }\r\n    \r\n    addMessage(`${favoriteCity.city || favoriteCity.name} seçildi!`, 'success')\r\n    addMessage('Bu şehir için ne öğrenmek istiyorsunuz?', 'info')\r\n    addMessage('Örnek sorular: \"bugün hava nasıl\", \"haftalık tahmin\", \"yarın yağmur var mı\", \"sıcaklık kaç derece\"', 'info')\r\n    \r\n    chatStep.value = 'question'\r\n    return\r\n  }\r\n  \r\n  // Search for new city\r\n  addMessage(`\"${query}\" şehri aranıyor...`, 'loading')\r\n  \r\n  const location = await searchLocation(query)\r\n  \r\n  if (location) {\r\n    selectedCity.value = location\r\n    \r\n    // Move map to selected city\r\n    if (map) {\r\n      map.flyTo([location.lat, location.lng], 10)\r\n      await fetchCurrentWeather()\r\n    }\r\n    \r\n    addMessage(`${location.city || location.name} şehri bulundu ve seçildi!`, 'success')\r\n    \r\n    // Suggest adding to favorites\r\n    if (!favoriteCities.value.find(fav => fav.name === location.name)) {\r\n      addMessage(`Bu şehri favorilerinize eklemek için \"favorilere ekle\" yazın.`, 'info')\r\n      window.lastFoundLocation = location\r\n    }\r\n    \r\n    addMessage('Bu şehir için ne öğrenmek istiyorsunuz?', 'info')\r\n    addMessage('Örnek sorular: \"bugün hava nasıl\", \"haftalık tahmin\", \"yarın yağmur var mı\", \"sıcaklık kaç derece\"', 'info')\r\n    \r\n    chatStep.value = 'question'\r\n  } else {\r\n    addMessage(`\"${query}\" şehri bulunamadı.`, 'error')\r\n    addMessage('Lütfen farklı bir şehir adı deneyin. Örnek: İstanbul, Diyarbakır, Paris, New York', 'info')\r\n  }\r\n}\r\n\r\nasync function handleWeatherQuestion(query) {\r\n  if (!selectedCity.value) {\r\n    addMessage('Önce bir şehir seçmelisiniz.', 'error')\r\n    chatStep.value = 'city'\r\n    return\r\n  }\r\n  \r\n  // Handle favorite commands in question step\r\n  const analysis = analyzeMessage(query)\r\n  \r\n  if (analysis.isAddFavoriteCommand) {\r\n    if (window.lastFoundLocation) {\r\n      addToFavorites(window.lastFoundLocation)\r\n      window.lastFoundLocation = null\r\n    } else if (selectedCity.value) {\r\n      addToFavorites(selectedCity.value)\r\n    }\r\n    return\r\n  }\r\n  \r\n  // Handle \"new city\" or \"change city\" commands\r\n  if (query.toLowerCase().includes('yeni şehir') || query.toLowerCase().includes('şehir değiştir') || query.toLowerCase().includes('başka şehir')) {\r\n    addMessage('Yeni şehir seçimi için hangi şehri istiyorsunuz?', 'info')\r\n    chatStep.value = 'city'\r\n    selectedCity.value = null\r\n    return\r\n  }\r\n  \r\n  // Analyze weather question\r\n  const city = selectedCity.value\r\n  \r\n  if (analysis.isWeeklyForecast) {\r\n    addMessage(`${city.city || city.name} için 7 günlük tahmin getiriliyor...`, 'loading')\r\n    const weeklyResponse = await getWeeklyForecast(city.lat, city.lng)\r\n    \r\n    if (weeklyResponse) {\r\n      addMessage(weeklyResponse.forecast.replace(/\\n/g, '<br>'), 'weather')\r\n    } else {\r\n      addMessage('Haftalık tahmin şu anda alınamıyor.', 'error')\r\n    }\r\n  } else if (analysis.isTomorrowQuery) {\r\n    addMessage(`${city.city || city.name} için yarın hava tahmini getiriliyor...`, 'loading')\r\n    const tomorrowResponse = await getTomorrowForecast(city.lat, city.lng)\r\n    \r\n    if (tomorrowResponse) {\r\n      addMessage(tomorrowResponse.forecast.replace(/\\n/g, '<br>'), 'weather')\r\n    } else {\r\n      addMessage('Yarın hava tahmini şu anda alınamıyor.', 'error')\r\n    }\r\n  } else {\r\n    // General weather info\r\n    addMessage(`${city.city || city.name} için hava durumu bilgileri getiriliyor...`, 'loading')\r\n    const weatherResponse = await getChatWeatherResponse(city.lat, city.lng, query)\r\n    \r\n    if (weatherResponse) {\r\n      addMessage(weatherResponse.response.replace(/\\n/g, '<br>'), 'weather')\r\n    } else {\r\n      addMessage('Hava durumu verileri şu anda alınamıyor.', 'error')\r\n    }\r\n  }\r\n  \r\n  // Ask if user wants to ask another question\r\n  addMessage('Başka bir soru sormak ister misiniz? Veya \"yeni şehir\" yazarak farklı bir şehir seçebilirsiniz.', 'info')\r\n}\r\n\r\n// ----- Current weather (Open-Meteo) -----\r\nasync function fetchCurrentWeather() {\r\n  if (!map) return\r\n  const c = map.getCenter()\r\n  currentCenter.lat = c.lat\r\n  currentCenter.lng = c.lng\r\n  \r\n  const weather = await getWeatherFromAPI(c.lat, c.lng)\r\n  if (weather) {\r\n    currentWeather.value = weather\r\n    updatedAt.value = Date.now()\r\n  }\r\n}\r\n\r\n// ----- Map interaction -----\r\nfunction locateMe() {\r\n  if (!navigator.geolocation) return\r\n  navigator.geolocation.getCurrentPosition(pos => {\r\n    const { latitude, longitude } = pos.coords\r\n    if (map) {\r\n      map.flyTo([latitude, longitude], 8)\r\n      fetchCurrentWeather()\r\n    }\r\n  })\r\n}\r\n\r\nlet weatherTimer\r\nfunction startWeatherAutoRefresh() {\r\n  if (weatherTimer) clearInterval(weatherTimer)\r\n  weatherTimer = setInterval(fetchCurrentWeather, 60_000 * 10) // 10 minutes\r\n}\r\n\r\nonMounted(async () => {\r\n  // Lazy-load Leaflet on client to avoid SSR issues\r\n  const leaflet = await import('leaflet')\r\n  L = leaflet.default\r\n  if (!mapEl.value) return\r\n  map = L.map(mapEl.value, {\r\n    center: [20, 0],\r\n    zoom: 2,\r\n    worldCopyJump: false, // Dünya tekrarı kapalı\r\n    maxBounds: [[-60, -180], [85, 180]], // Sınırlar: -60° (güney sınırı) / +85° (kuzey sınırı)\r\n    maxBoundsViscosity: 1.0, // Sert sınır - dışarı çıkamaz\r\n    minZoom: 1, // Minimum zoom - çok uzaklaşamaz\r\n    maxZoom: 18 // Maximum zoom\r\n  })\r\n\r\n  // Sadece topografik harita\r\n  const topoLayer = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {\r\n    attribution: '&copy; OpenStreetMap contributors, SRTM | Map style: &copy; OpenTopoMap (CC-BY-SA)',\r\n    noWrap: true // Tekrarlamayı engelle\r\n  })\r\n  \r\n  topoLayer.addTo(map)\r\n  L.control.scale({ metric: true, imperial: true }).addTo(map)\r\n\r\n  map.on('moveend zoomend', () => { fetchCurrentWeather() })\r\n  \r\n  // Initial weather fetch\r\n  await fetchCurrentWeather()\r\n  startWeatherAutoRefresh()\r\n  \r\n  // Load favorite cities from localStorage\r\n  loadFavoriteCities()\r\n  \r\n  // Welcome message for two-step system\r\n  addMessage('COSMOSTORM Weather Intelligence System', 'system')\r\n  addMessage('Hangi şehrin hava durumunu öğrenmek istiyorsunuz?', 'info')\r\n  \r\n  if (favoriteCities.value.length > 0) {\r\n    addMessage('Favori şehirlerinizi görmek için \"favorilerim\" yazın.', 'info')\r\n  }\r\n  \r\n  addMessage('Şehir örnekleri: İstanbul, Diyarbakır, Paris, New York, Tokyo...', 'info')\r\n})\r\n\r\nonBeforeUnmount(() => {\r\n  if (map) {\r\n    map.remove()\r\n    map = null\r\n  }\r\n  if (weatherTimer) clearInterval(weatherTimer)\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.page {\r\n  display: flex;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\r\n}\r\n\r\n/* Left Side: Map Container */\r\n.map-container {\r\n  flex: 1;\r\n  position: relative;\r\n  height: 100vh;\r\n}\r\n\r\n#map {\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1;\r\n}\r\n\r\n/* Locate Button Overlay */\r\n.locate-btn-overlay {\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 20px;\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 25px;\r\n  border: none;\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(10px);\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  cursor: pointer;\r\n  z-index: 1000;\r\n  transition: all 0.3s ease;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #333;\r\n}\r\n\r\n.locate-btn-overlay:hover {\r\n  background: rgba(102, 126, 234, 0.95);\r\n  color: white;\r\n  transform: scale(1.05);\r\n}\r\n\r\n/* Right Side: Chat Panel */\r\n.chat-panel {\r\n  width: 400px;\r\n  height: 100vh;\r\n  background: linear-gradient(145deg, #1a1f3a 0%, #2d3561 100%);\r\n  border-left: 1px solid rgba(102, 126, 234, 0.2);\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.chat-panel::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: \r\n    radial-gradient(circle at 20% 30%, rgba(102, 126, 234, 0.1) 0%, transparent 50%),\r\n    radial-gradient(circle at 80% 70%, rgba(118, 75, 162, 0.1) 0%, transparent 50%);\r\n  pointer-events: none;\r\n  z-index: 0;\r\n}\r\n\r\n/* Chat Header */\r\n.chat-header {\r\n  padding: 25px 20px;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.header-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.panel-title {\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  background: linear-gradient(45deg, #667eea, #ffd700);\r\n  -webkit-background-clip: text;\r\n  background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  margin: 0;\r\n  letter-spacing: 1px;\r\n}\r\n\r\n.status-indicator {\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  background: #51cf66;\r\n  box-shadow: 0 0 15px rgba(81, 207, 102, 0.6);\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n.panel-subtitle {\r\n  color: rgba(255, 255, 255, 0.7);\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n/* Chat Messages */\r\n.chat-messages {\r\n  flex: 1;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar-track {\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border-radius: 3px;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar-thumb {\r\n  background: rgba(102, 126, 234, 0.3);\r\n  border-radius: 3px;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar-thumb:hover {\r\n  background: rgba(102, 126, 234, 0.5);\r\n}\r\n\r\n/* Message Styles */\r\n.message {\r\n  margin: 15px 0;\r\n  padding: 15px 18px;\r\n  border-radius: 20px;\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n  max-width: 90%;\r\n  word-wrap: break-word;\r\n  position: relative;\r\n  animation: messageSlideIn 0.4s ease-out;\r\n}\r\n\r\n.message.user {\r\n  background: linear-gradient(135deg, #667eea, #764ba2);\r\n  color: white;\r\n  margin-left: auto;\r\n  border-bottom-right-radius: 8px;\r\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\r\n}\r\n\r\n.message.system {\r\n  background: rgba(255, 255, 255, 0.08);\r\n  color: #e3f2fd;\r\n  border: 1px solid rgba(255, 255, 255, 0.15);\r\n  border-left: 4px solid #667eea;\r\n  border-bottom-left-radius: 8px;\r\n}\r\n\r\n.message.weather {\r\n  background: linear-gradient(135deg, rgba(33, 150, 243, 0.15), rgba(3, 169, 244, 0.15));\r\n  color: #e1f5fe;\r\n  border: 1px solid rgba(33, 150, 243, 0.3);\r\n  border-left: 4px solid #2196f3;\r\n  border-bottom-left-radius: 8px;\r\n}\r\n\r\n.message.info {\r\n  background: rgba(76, 175, 80, 0.15);\r\n  color: #e8f5e8;\r\n  border: 1px solid rgba(76, 175, 80, 0.3);\r\n  border-left: 4px solid #4caf50;\r\n  border-bottom-left-radius: 8px;\r\n}\r\n\r\n.message.success {\r\n  background: rgba(76, 175, 80, 0.2);\r\n  color: #e8f5e8;\r\n  border: 1px solid rgba(76, 175, 80, 0.4);\r\n  border-left: 4px solid #4caf50;\r\n  border-bottom-left-radius: 8px;\r\n}\r\n\r\n.message.error {\r\n  background: rgba(244, 67, 54, 0.15);\r\n  color: #ffebee;\r\n  border: 1px solid rgba(244, 67, 54, 0.3);\r\n  border-left: 4px solid #f44336;\r\n  border-bottom-left-radius: 8px;\r\n}\r\n\r\n.message.loading {\r\n  background: rgba(255, 193, 7, 0.15);\r\n  color: #fff8e1;\r\n  border: 1px solid rgba(255, 193, 7, 0.3);\r\n  border-left: 4px solid #ffc107;\r\n  border-bottom-left-radius: 8px;\r\n  animation: loadingPulse 1.5s infinite;\r\n}\r\n\r\n.message-content {\r\n  margin-bottom: 6px;\r\n  font-weight: 400;\r\n}\r\n\r\n.message-time {\r\n  font-size: 11px;\r\n  opacity: 0.6;\r\n  text-align: right;\r\n  font-weight: 300;\r\n}\r\n\r\n/* Chat Input */\r\n.chat-input {\r\n  display: flex;\r\n  padding: 20px;\r\n  gap: 12px;\r\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\r\n  background: rgba(255, 255, 255, 0.02);\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.input-field {\r\n  flex: 1;\r\n  padding: 15px 20px;\r\n  border: 2px solid rgba(255, 255, 255, 0.1);\r\n  border-radius: 25px;\r\n  background: rgba(255, 255, 255, 0.05);\r\n  color: white;\r\n  font-size: 14px;\r\n  outline: none;\r\n  transition: all 0.3s ease;\r\n  backdrop-filter: blur(10px);\r\n  font-family: inherit;\r\n}\r\n\r\n.input-field::placeholder {\r\n  color: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.input-field:focus {\r\n  border-color: rgba(102, 126, 234, 0.6);\r\n  box-shadow: 0 0 25px rgba(102, 126, 234, 0.2);\r\n  background: rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.send-btn {\r\n  width: 50px;\r\n  height: 50px;\r\n  border: none;\r\n  border-radius: 25px;\r\n  background: linear-gradient(135deg, #667eea, #764ba2);\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\r\n}\r\n\r\n.send-btn:hover:not(:disabled) {\r\n  transform: scale(1.05);\r\n  box-shadow: 0 6px 25px rgba(102, 126, 234, 0.4);\r\n}\r\n\r\n.send-btn:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n  transform: none;\r\n}\r\n\r\n/* Animations */\r\n@keyframes pulse {\r\n  0%, 100% { \r\n    opacity: 1; \r\n    transform: scale(1);\r\n  }\r\n  50% { \r\n    opacity: 0.7; \r\n    transform: scale(1.1);\r\n  }\r\n}\r\n\r\n@keyframes messageSlideIn {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateY(15px);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n@keyframes loadingPulse {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.6; }\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n  .page {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .map-container {\r\n    height: 60vh;\r\n  }\r\n  \r\n  .chat-panel {\r\n    width: 100%;\r\n    height: 40vh;\r\n    border-left: none;\r\n    border-top: 1px solid rgba(102, 126, 234, 0.2);\r\n  }\r\n  \r\n  .input-field {\r\n    font-size: 16px; /* Prevent zoom on iOS */\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .chat-header {\r\n    padding: 20px 15px;\r\n  }\r\n  \r\n  .chat-messages {\r\n    padding: 15px;\r\n  }\r\n  \r\n  .chat-input {\r\n    padding: 15px;\r\n  }\r\n  \r\n  .message {\r\n    padding: 12px 15px;\r\n    font-size: 13px;\r\n  }\r\n}\r\n</style>"],"version":3}